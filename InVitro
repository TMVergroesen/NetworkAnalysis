// Code used for paper 'Falsifying computational models of endothelial network formation through quantitative comparison with in vitro models'
testmode=true;
/* Start code */
run("Fresh Start"); //reset settings
if (testmode==false) {
	close("*"); //close all images
	run("Collect Garbage"); //clean cache
	setBatchMode(true); // Open images in batchmode
}
requires("1.33s");
dir=getDirectory("Choose a directory with TIFs");
dir2=getDirectory("Select an output folder");
count=0;
countFiles(dir);
n=0;
roundWells=true; //Define is ROI is round or square
branch_info=true; //Do you want to separate sprouts from segments/branches
watershed=true; //Compensate for segmentation errors by weak contrast
save_overview=true; //Save a result image with network characteristic overlays
wellSize=3800; //Define ROI diameter in µm
pixelSize=0.875; //µm
timestep=150; //minutes
pixelUnit="µm";
processFiles(dir);


/* Find all files in all subfolders */
function countFiles(dir){
	list=getFileList(dir);
	for(j=0;j<list.length;j++){
		if(endsWith(list[j],"/")){countFiles(""+dir+list[j]);}
		else{count++;}}}
function processFiles(dir){
	list=getFileList(dir);
	for(j=0;j<list.length;j++){
		if(endsWith(list[j],"/")){processFiles(""+dir+list[j]);}
		else{
			showProgress(n++,count);
			path=dir+list[j];
			processFile(path);}}}
			
/* Start analysis */
function processFile(path){
	if(endsWith(path,".tif")||endsWith(path,".png")||endsWith(path,".czi")||endsWith(path,".jpg")){
		start=getTime();
		open(path);
		if(testmode){waitForUser("The timelapse should be opened. \nIf not, cancel and select a different directory.");}
		run("Select None");
		setOption("BlackBackground",true);
		filename=getTitle();
		img=getImageID();
		getDimensions(width, height, channels, slices, frames);
		getPixelSize(unit,pixelWidth,pixelHeight);
		if (unit=="pixels") {
			pixelWidth=pixelSize;
			pixelHeight=pixelSize;
			unit=pixelUnit;}
		if (Stack.getFrameInterval==0) {Stack.setFrameInterval(timestep);}
		setVoxelSize(pixelWidth, pixelHeight, 1, unit); //avoid NaN in branch length due to NaN in z-unit
		if(testmode){waitForUser("Are the pixelsize ("+pixelWidth+unit+") and timestep ("+Stack.getFrameInterval+" minutes) correct? \nIf not, cancel and adjust in image metadata or in line 21-23.");}
		if (width>wellSize*2) { //reduce image size for images that are too large to save processing time
			run("Scale...", "x="+wellSize/width+" y="+wellSize/width+" z=1.0 interpolation=Bilinear fill process create");
			selectImage(img);
			close();
			img=getImageID();
			getDimensions(width,height,channels,slices,frames);}
		size=slices*frames; //Sometimes frames are saved as slices
		getPixelSize(unit,pixelWidth,pixelHeight);
		
		/* Select the phase contrast channel by selecting the brightest channel */
		if(channels>1){
			run("Set Measurements...","mean redirect=None decimal=0");
			run("Measure");
			maxMean=getResult("Mean",0);
			channel=1;
			for(i=1;i < channels;i++){
				run("Next Slice [>]");
				run("Measure");
				if(getResult("Mean",i)>maxMean){
					maxMean=getResult("Mean",i);
					channel=i+1;}}
			run("Arrange Channels...","new="+channel+"");
			run("Clear Results");
			if(testmode){waitForUser("The multicoloured timelapse should be reduced to a single channel timelapse. \nIf not, cancel and remove the other channels manually.");}
			}
		if(is("grayscale")==false){
			run("Grays");}
			
		/* Make a copy for the overview image */
		img=getImageID();
		if (save_overview) {
			run("Scale...", "x=0.25 y=0.25 z=1.0 interpolation=Bilinear fill process create");
			img2=getImageID();}
		if(testmode){waitForUser("The timelapse is duplicated to make the overview image.");}
		
		/* Select well */
		selectImage(img);
		if(roundWells){
			makeOval(width/2-(wellSize/pixelWidth)/2,-(wellSize/pixelWidth-height)/2,wellSize/pixelWidth,wellSize/pixelWidth);
			run("Crop","stack");
		if(testmode){waitForUser("The timelapse has been cropped for a round well. \nIf your timelapse is not round, cancel and \nchange roundWells==false in line 16.");}
		}
		else {run("Select All");}
				
		/* Extract parameters and create arrays */
		Sprouts_length=newArray(size);
		Sprouts_n=newArray(size);
		Segments_n=newArray(size);
		Segments_length=newArray(size);
		Branches_length=newArray(size);
		Branches_n=newArray(size);
		Junctions_n=newArray(size);
		Triple_points_n=newArray(size);
		Branches_max_length=newArray(size);
		Lacunae_n=newArray(size);
		Lacunae_total_area=newArray(size);
		Lacunae_area=newArray(size);
		FeretX=newArray(size);
		FeretY=newArray(size);
		FeretMin=newArray(size);
		Feret_angle=newArray(size);
		Perimeter=newArray(size);
		Circularity=newArray(size);
		Skeletons_n=newArray(size);
		Experiment=newArray(size);
		AreaL=newArray(size);
		AreaB=newArray(size);
		Time=newArray(size);
		Slice=newArray(size);
		Percentage=newArray(size);
		Major=newArray(size);
		Minor=newArray(size);
		
		/* Start segmentation */
		if(testmode){waitForUser("Now the segmentation starts.");}
		run("Duplicate...","ignore duplicate");
		img3=getImageID();
		run("Gaussian Blur...","sigma=10 scaled stack"); //remove high frequency signal
		imageCalculator("Subtract create stack",img, img3); //remove low frequency signal
		img4=getImageID();
		selectImage(img3);
		close();
		imageCalculator("Add create 32-bit stack",img, img4); //sharpen image
		run("8-bit");
		selectImage(img);
		close();
		selectImage(img4);
		close();
		img=getImageID();
		run("Restore Selection");
		run("Gaussian Blur...","sigma=1 stack"); //Remove noise
		run("Variance...","radius=10 stack"); //Calculate variance of regions
		run("Gaussian Blur...","sigma=3.5 scaled stack"); //Smooth result
		run("Auto Threshold","method=Huang stack"); //Segment image
		run("Clear Outside","stack");
		rename("Binary");
		bin=getImageID();
		if(testmode){waitForUser("The image has been segmented and will now be scaled down to create a skeleton network.");}
		run("Scale...", "x="+0.1*pixelWidth+" y="+0.1*pixelWidth+" interpolation=Bilinear average process create");
		run("Auto Threshold","method=Huang dark stack");
		saveAs("Tiff",dir2+filename+"_binary.tif");
		sbin=getImageID();
		
		/* Start Skeletonization */
		selectImage(sbin);
		if(roundWells){
			if (height*pixelWidth<wellSize) {makeOval(0,-(wellSize-height*pixelWidth)/2*0.1,wellSize*0.1,wellSize*0.1);}
			else {makeOval(0,0,wellSize*0.1,wellSize*0.1);}
			run("Enlarge...","enlarge=-100");
			run("Crop","stack");
			setBackgroundColor(255,255,255);
			run("Clear Outside","stack");}
		else {run("Select All");}
		run("Set Measurements...","area redirect=None decimal=0");
		run("Measure");
		Areab=getResult("Area", 0);
		run("Clear Results");
	//	run("Invert","stack");
		for(i=1;i<size+1;i++){
			setSlice(i);
			run("Skeletonize","slice");}
		if(testmode){waitForUser("The network should be skeletonized. \nIf the background has been skeletonized instead, cancel and \nadd or remove the // before the invert command on line 178.");}
		skel=getImageID();
		run("Analyze Particles...", "size=400-Infinity show=Masks stack"); //Remove small clusters from skeleton
		selectImage(skel);
		close();
		//run("Invert","stack");
		run("Restore Selection");
		setBackgroundColor(255,255,255);
		run("Clear Outside","stack");
		if(testmode){waitForUser("The background should be removed around the field of interest. \nIf not, cancel and add or remove the // before the invert command in line 187 \nor setBackgroundColor to 0,0,0 on line 189.");}
		saveAs("Tiff",dir2+filename+"_Skeleton.tif");
		if (roundWells) {if (height*pixelWidth<wellSize-200){makeOval(0,-(wellSize-200-height*pixelWidth)/2*0.1,wellSize*0.1-20,wellSize*0.1-20);}}
		else {run("Select All");}
		run("Area to Line");
		run("Select None");
		getPixelSize(nunit, npixelWidth, npixelHeight);
		skel=getImageID();
		if(testmode){waitForUser("Now the tool will extract all details of the skeleton for each timestep of the timelapse. \nThis could take a while when branch_info is true, in line 17, and the tool will extract \ninfo on whether branches are sprouts or segments.");}
		for(i=0;i<size;i++){
			Sprouts_n[i]=0;
			Sprouts_length[i]=0;
			Segments_n[i]=0;
			Segments_length[i]=0;
			Skeletons_n[i]=0;
			test=1;
			selectImage(skel);
			setSlice(i+1);
			run("Analyze Particles...", "size=4000-Infinity show=Masks");
			mask=getTitle();
			run("Analyze Skeleton (2D/3D)","prune=none");
			selectWindow("Tagged skeleton");
			close();
			if (nResults>0) {IJ.renameResults("Results","All skeletons");}
			else {
				print("No skeletons detected in slice "+i);
				if(isOpen("Tagged skeleton")){close();}
				if (isOpen(mask)){close();}
				getDimensions(wth, hgt, cha, scs, frm);
				newImage("Endpoints", "8-bit black", wth, hgt, 1);
				newImage("Nodes", "8-bit black", wth, hgt, 1);
				continue}
			selectWindow(mask);
			run("Restore Selection");
			setForegroundColor(0, 0, 0);
			setBackgroundColor(255, 255, 255);
			run("Fill", "slice");
			run("Analyze Skeleton (2D/3D)", "prune=none show");
			selectImage("Tagged skeleton");
			run("Duplicate...", "title=Nodes");
			setThreshold(63, 79);
			setOption("BlackBackground", false);
			run("Convert to Mask");
			selectImage("Tagged skeleton");
			setThreshold(23, 39);
			setOption("BlackBackground", false);
			run("Convert to Mask");
			run("Find Maxima...", "prominence=50 light output=List");
			X=newArray(nResults);
			Y=newArray(nResults);
			if (nResults>0) {
				for (ii = 0; ii < nResults; ii++) {
					X[ii]=getResult("X", ii);
					Y[ii]=getResult("Y", ii);}
					selectWindow("Results");
					run("Close");}
			else {print("No endpoints in slice "+i+1);
				getDimensions(wth, hgt, cha, scs, frm);
				newImage("Tagged skeleton", "8-bit black", wth, hgt, 1);}
			selectImage("Tagged skeleton");
			run("Invert");
			rename("Endpoints");
			selectImage(mask);
			close();
			
			/* Find the biggest skeletons */
			IJ.renameResults("All skeletons","Results");
			min_branch=400; //Skeletons below min_branch µm will not be considered
			nskel=nResults;
			num_skel=0;
			total_branch=newArray(nResults);
			for(ii=0;ii<nskel;ii++){
				total_branch[ii]=getResult("# Branches",ii)*getResult("Average Branch Length",ii);
				if(total_branch[ii] > min_branch){
					if(branch_info){ // extract type of branch
						IJ.renameResults("Results","All skeletons");
						IJ.renameResults("Branch information","Results");
						for (iii = 0; iii < nResults; iii++) {
							if (getResult("Skeleton ID",iii)==ii+1) {
								branch_X1=round(getResult("V1 x", iii)/npixelWidth);
								branch_Y1=round(getResult("V1 y", iii)/npixelWidth);
								branch_X2=round(getResult("V2 x", iii)/npixelWidth);
								branch_Y2=round(getResult("V2 y", iii)/npixelWidth);				
								for (iiii = 0; iiii < X.length; iiii++) {
									if (Sprouts_n[i]>=X.length) {
										test=1;
										continue}
								//	print("Endpoint "+iiii+" out of "+X.length);
									if (branch_X1==X[iiii]&&branch_Y1==Y[iiii]){
										Sprouts_length[i]=((Sprouts_length[i]*Sprouts_n[i])+getResult("Branch length", iii))/(Sprouts_n[i]+1);
										Sprouts_n[i]=Sprouts_n[i]+1;
								//		print("The length of the sprout "+Sprouts_n[i]+" out of "+X.length+" endpoints is "+getResult("Branch length", iii)+" at coordinate "+X[iiii]+","+Y[iiii]+".");
										test=0;
										break
									}
									else if (branch_X2==X[iiii]&&branch_Y2==Y[iiii]){
										Sprouts_length[i]=((Sprouts_length[i]*Sprouts_n[i])+getResult("Branch length", iii))/(Sprouts_n[i]+1);
										Sprouts_n[i]=Sprouts_n[i]+1;
								//		print("The length of the sprout "+Sprouts_n[i]+" out of "+X.length+" endpoints is "+getResult("Branch length", iii)+" at coordinate "+X[iiii]+","+Y[iiii]+".");
										test=0;
										break
									}
									else{test=1;}
								}
								if (test==1) {
									Segments_length[i]=(Segments_length[i]*Segments_n[i]+getResult("Branch length", iii))/(Segments_n[i]+1);
									Segments_n[i]=Segments_n[i]+test;
								//	print("The length of branch "+Segments_n[i]+" is "+getResult("Branch length", iii));
								}
							}
						}
					//	print("The total number of sprouts in slice "+i+" is: "+Sprouts_n[i]);
						IJ.renameResults("Results","Branch information");
						IJ.renameResults("All skeletons","Results");
					}
					/* Extract the results from the biggest skeletons */
					Branches_length[i]=((Branches_length[i]*Branches_n[i])+total_branch[ii])/(Branches_n[i]+getResult("# Branches" ,ii));
					Branches_n[i]=Branches_n[i]+getResult("# Branches" ,ii);
					Junctions_n[i]=Junctions_n[i]+getResult("# Junctions" ,ii);
					Triple_points_n[i]=Triple_points_n[i]+getResult("# Triple points",ii);
					Branches_max_length[i]=maxOf(Branches_max_length[i],getResult("Maximum Branch Length" ,ii));
					num_skel++;
				}
			}
			Skeletons_n[i]=num_skel;}
		run("Images to Stack", "name=Endpoints title=Endpoint");
		run("Images to Stack", "name=Nodes title=Nodes");
		if (testmode) {waitForUser("The tool has finished analyzing the skeleton and generated images \nof the endpoints and the nodes for the overview image.");}
		if (save_overview==false) {if(isOpen("Endpoint")){selectImage("Endpoint");close();};if(isOpen("Nodes")){selectImage("Nodes");run("Close");}}
		imgep=getImageID();
		if(isOpen("Branch information")){
			selectWindow("Branch information");
			run("Close");}
		if (nResults>0) {
			selectWindow("Results");
			run("Close");}
		selectImage(bin);
		if (testmode) {waitForUser("Now the tool will start with the watershed step for the lacunae extraction");}
		
		/* watershed */
		if(watershed){
			/* Remove small holes from watershed */
		//	run("Invert","stack");
			run("Analyze Particles...", "size=2000-20000 show=Masks stack");//extract the small holes that can be lost through strict watershed
			sh=getImageID();
			if (testmode) {waitForUser("The tool should have extracted all the small (2000-20000 µm²) lacunae from the segmented image. \nIf not, cancel and add or remove the // before the invert command in line 327");}
			selectImage(bin);
			run("Analyze Particles...", "size=20000-infinity show=Masks stack");
			selectImage(bin);
			close();
			bin=getImageID();
			/* Watershed */
			run("Restore Selection");
			run("Invert","stack");
			run("Clear Outside", "stack");
			run("Analyze Particles...","size=2000-Infinity show=Masks stack"); //remove small particles/single cells (<2000µm²) from binary
			if (testmode) {waitForUser("The tool should have removed small (<2000 µm²) pieces of the network in preparation of the watershed. \nIf not, cancel and add or remove // in front of the invert command in line 338.");}
			run("Invert","stack");
			run("Distance Map","stack");
			if (testmode) {waitForUser("A distance transform of the lacunae should have been generated with thick branches and blurry lacunae. \nIf the distance transform has been executed on the network branches instead, cancel and \nadd or remove // in front of the invert command in line 342.");}
			dist=getImageID();
			if (testmode) {waitForUser("The tool will segment the lacunae slice by slice. This will take a while.");}
			if(size>1){
				/* Find the maxima of the distance map slice by slice */
				/*skip the first hour*/
				for(i=1;i<floor(60/timestep)+1;i++){
					getDimensions(newwidth, newheight,NULL,NULL,NULL);
					newImage("Mask of Mask of Binary("+i+") Segmented", "8-bit black", newwidth, newheight, 1);
				}
				for(i=floor(60/timestep)+1;i<size+1;i++){
					selectImage(dist);
					setSlice(i);
					//print("Slice "+i+" out of "+size+" segmenting.");
					run("Find Maxima...","prominence=60 light output=[Segmented Particles]");
				}
				run("Images to Stack");}
			else{run("Find Maxima...","prominence=60 light output=[Segmented Particles]");}
			selectImage(dist);
			close();
			run("Restore Selection");
			run("Invert","stack");
			run("Clear Outside","stack");
			stack=getImageID();
			/* Add the watershed segmentation to the binary */
			run("Select None");
			selectImage(bin);
			imageCalculator("Add stack",bin,stack);
			if (testmode) {setSlice(size);waitForUser("The tool should have added a very thin line of the watershed to the segmented image. \nIf the tool has instead added the background of the watershed, cancel and \nadd or remove the // in front of the invert command in line 366.");}
			selectImage(stack);
			close();
			rename("Binary");
			bin=getImageID();
			selectImage(sh);
			//run("Invert","stack");
			selectImage(bin);
			imageCalculator("Subtract stack", bin,sh);
			if (testmode) {waitForUser("The tool should have added the small lacunae extracted at the \nstart back to the segmented image. \nIf the tool has instead added the background of the small lacunae, cancel and \nadd or remove the // in front of the invert command in line 378.");}
			selectImage(sh);
			close();
			run("Invert","stack");
			rename("Binary");
			bin=getImageID();
		}	
		/* Measure the lacunae */
		selectImage(bin);
		setBackgroundColor(0,0,0);
		if(roundWells){
			if (height*pixelWidth<wellSize) {makeOval(0,-(wellSize/pixelWidth-height)/2,wellSize/pixelWidth,wellSize/pixelWidth);}
			else {makeOval(0,0,wellSize/pixelWidth,wellSize/pixelWidth);}
			run("Enlarge...","enlarge=-5");
			run("Clear Outside","stack");}
		else {run("Select All");}
		run("Set Measurements...","area redirect=None decimal=0");
		run("Measure");
		Areal=getResult("Area", 0);
		run("Clear Results");
		if (testmode) {waitForUser("The tool will now measure the lacunae.");}
		//run("Invert","stack");
		run("Set Measurements...","area standard centroid center perimeter bounding fit shape feret's area_fraction stack nan add redirect=None decimal=3");
		run("Analyze Particles...","size=4000-11300000  circularity=0.20-1.00 show=[Bare Outlines] display exclude clear summarize add stack");
		if (testmode) {waitForUser("If the outlines are outlines of the branches instead of the lacunae, \ncancel and add or remove // in front of the invert command in line 407.");}
		rename(filename+"_Outlines");
		selectImage(bin);
		close();
		
		/*Label everything in the image*/
		if (save_overview) {
			selectImage(img2);
			img2=getTitle();
			getDimensions(width, height, channels, slices, frames);
			selectWindow(filename+"_Skeleton.tif");
			run("Scale...", "x=3.5 y=3.5 z=1.0 interpolation=Bilinear fill process create");
			selectWindow(filename+"_Skeleton.tif");
			close();
			setBackgroundColor(255,255,255);
			run("Scale...", "x="+1/pixelWidth/1.4+" y="+1/pixelWidth/1.4+" z=1.0 interpolation=Bilinear fill average process");
			makeRectangle((getWidth()-width)/2, (getHeight()-height)/2, width, height);
			run("Crop");
			if (branch_info) {
				selectWindow("Endpoints");
				run("Invert","stack");
				setBackgroundColor(255,255,255);
				run("Options...","iterations=1 count=1 do=Dilate stack");
				run("Scale...", "x=3.5 y=3.5 z=1.0 interpolation=Bilinear fill process create");
				makeRectangle((getWidth()-width)/2, (getHeight()-height)/2, width, height);
				run("Crop");
				selectWindow("Endpoints");
				close();
				setBackgroundColor(255,255,255);
				run("Scale...", "x="+1/pixelWidth/1.4+" y="+1/pixelWidth/1.4+" z=1.0 interpolation=Bilinear fill average process");
				makeRectangle((getWidth()-width)/2, (getHeight()-height)/2, width, height);
				run("Crop");}
			selectWindow("Nodes");
			setBackgroundColor(255,255,255);
			run("Options...","iterations=1 count=1 do=Dilate stack");
			run("Scale...", "x=3.5 y=3.5 z=1.0 interpolation=Bilinear fill process create");
			makeRectangle((getWidth()-width)/2, (getHeight()-height)/2, width, height);
			run("Crop");
			selectWindow("Nodes");
			close();
			setBackgroundColor(255,255,255);
			run("Scale...", "x="+1/pixelWidth/1.4+" y="+1/pixelWidth/1.4+" z=1.0 interpolation=Bilinear fill average process");
			makeRectangle((getWidth()-width)/2, (getHeight()-height)/2, width, height);
			run("Crop");
			selectWindow(filename+"_Outlines");
			setBackgroundColor(255,255,255);
			run("Options...","iterations=3 count=1 do=Dilate stack");
			run("Scale...", "x=0.25 y=0.25 z=1.0 interpolation=Bilinear fill average process");
			setBackgroundColor(255,255,255);
			makeRectangle((getWidth()-width)/2, (getHeight()-height)/2, width, height);
			run("Crop");		
			run("Convert to Mask", "method=Default background=Light");
			if (expression) {

			run("Merge Channels...", "c1="+img2+" c2="+filename+"_Outlines c3="+filename+"_Skeleton-1.tif c4=Endpoints-1 c5=Nodes-1 create");
			run("Previous Slice [<]");
			run("Previous Slice [<]");
			run("Previous Slice [<]");
			run("Previous Slice [<]");
			run("Previous Slice [<]");
			run("Previous Slice [<]");
			run("Grays");
			run("Next Slice [>]");
			run("Yellow");
			run("Next Slice [>]");
			run("Cyan");
			run("Next Slice [>]");
			run("Blue");
			run("Next Slice [>]");
			run("Magenta");
			saveAs("Tiff", dir2+filename+"_result.tif");}
		if (testmode) {waitForUser("The tool has created an overview image. LUTs can be adjusted to \npreference, or channels can be removed.");}
		close("*"); //close all images
		
		/* Save the measurements */
		if(roiManager("count")>0){roiManager("Save",dir2+filename+"_RoiSet.zip");}
		if (nResults>0) {
		selectWindow("Results");
		saveAs("Results",dir2+filename+"_per_hole.csv");
		run("Close");
		}
		
		/* Extract the Lacunae results */
		if(size>1){IJ.renameResults("Summary of Binary","Results");}
		else{IJ.renameResults("Summary","Results");}
		for(row=0;row<size;row++){
			Lacunae_n[row]=getResult("Count",row);
			Lacunae_total_area[row]=getResult("Total Area",row);
			Lacunae_area[row]=getResult("Average Size",row);
			Percentage[row]=getResult("%Area", row);
			FeretX[row]=getResult("FeretX",row);
			FeretY[row]=getResult("FeretY",row);
			FeretMin[row]=getResult("MinFeret",row);
			Feret_angle[row]=getResult("FeretAngle",row);
			Perimeter[row]=getResult("Perim.",row);
			Major[row]=getResult("Major", row);
			Minor[row]=getResult("Minor", row);
			Circularity[row]=getResult("Circ.",row);
			Slice[row]=getResult("Slice", row);}
		run("Clear Results");
		
		/* Add branch info and the lacunae info to a fresh results table */
		for(i=0;i<size;i++){
			Experiment[i]=filename;
			Time[i]=i*60/timestep; //Time in hours
			AreaB[i]=Areab;
			AreaL[i]=Areal;}
		Array.show("Results",Experiment,Slice,Time,Lacunae_n,Lacunae_area,Lacunae_total_area,Percentage,FeretX,FeretY,FeretMin,Feret_angle,Perimeter,Circularity,Skeletons_n,Branches_length,Branches_n,Segments_length,Segments_n,Sprouts_length,Sprouts_n,Junctions_n,Triple_points_n,Branches_max_length,AreaB,AreaL);
		if (nResults>0) {
		selectWindow("Results");
		saveAs("Results",dir2+filename+"_total_network_quantification_"+pixelWidth+unit+".csv");
		if (testmode) {waitForUser("A table with all the output information has been generated \nand saved to the specified folder.");}
		run("Close");
		}
		run("Collect Garbage");
	//	finish=getTime();
	//	minutes=(finish-start)/1000/60;
	//	print(filename+" has been analyzed in "+minutes+" minutes.\nThat is "+minutes/size*60+" seconds per frame.");
	}
}
